import { PromptTemplate } from "@/lib/core/types";


export const uiComponentBuilderTemplate: PromptTemplate = {
  id: "ui-component-builder",
  name: "UI Component Builder",
  description: "Generate prompts for creating specific UI components with detailed requirements",
  category: "UI/UX",
  difficulty: "beginner",
  icon: "Palette",
  tags: ["ui", "components", "design", "frontend"],
  template: `Create a {componentType} component for {projectContext}. The component should {functionality} and include {features}.

Design requirements:
- Style: {designStyle}
- Responsive: {responsive}
- Accessibility: {accessibility}
- Interactions: {interactions}

Please provide the complete React component with TypeScript, proper styling using {stylingFramework}, and include any necessary props and state management.`,
  fields: [
    {
      id: "componentType",
      label: "Component Type",
      type: "select",
      icon: "Component",
      placeholder: "Select component type",
      description: "The type of UI component to create",
      required: true,
      options: [
        "Button",
        "Form",
        "Modal",
        "Card",
        "Navigation",
        "Table",
        "Chart",
        "Dashboard",
        "Header",
        "Footer",
        "Sidebar",
        "Dropdown",
      ],
    },
    {
      id: "projectContext",
      label: "Project Context",
      type: "text",
      icon: "FolderOpen",
      placeholder: "e.g., e-commerce website, admin dashboard",
      description: "The context or project where this component will be used",
      required: true,
    },
    {
      id: "functionality",
      label: "Core Functionality",
      type: "textarea",
      icon: "Settings",
      placeholder: "Describe what the component should do...",
      description: "The main functionality and behavior of the component",
      required: true,
    },
    {
      id: "features",
      label: "Specific Features",
      type: "tags",
      icon: "Sparkles",
      placeholder: "Add features",
      description: "Specific features and capabilities to include",
      required: true,
      suggestions: [
        "form validation",
        "loading states",
        "error handling",
        "animations",
        "keyboard navigation",
        "drag and drop",
        "search functionality",
        "sorting",
        "filtering",
        "pagination",
      ],
    },
    {
      id: "designStyle",
      label: "Design Style",
      type: "select",
      icon: "Paintbrush",
      placeholder: "Select design style",
      description: "The visual design approach",
      required: true,
      options: [
        "Modern/Minimal",
        "Material Design",
        "Glassmorphism",
        "Neumorphism",
        "Corporate",
        "Playful",
        "Dark Mode",
        "High Contrast",
      ],
    },
    {
      id: "responsive",
      label: "Responsive Requirements",
      type: "multiselect",
      icon: "Smartphone",
      placeholder: "Select responsive requirements",
      description: "How the component should adapt to different screen sizes",
      required: true,
      options: [
        "Mobile-first",
        "Desktop-first",
        "Tablet optimized",
        "Touch-friendly",
        "Adaptive layout",
        "Collapsible on mobile",
      ],
    },
    {
      id: "accessibility",
      label: "Accessibility Features",
      type: "multiselect",
      icon: "Eye",
      placeholder: "Select accessibility features",
      description: "Accessibility requirements to implement",
      required: true,
      options: [
        "Screen reader support",
        "Keyboard navigation",
        "ARIA labels",
        "Focus management",
        "Color contrast",
        "Reduced motion",
      ],
    },
    {
      id: "interactions",
      label: "Interactions",
      type: "tags",
      icon: "MousePointer",
      placeholder: "Add interactions",
      description: "User interactions and animations to include",
      required: false,
      suggestions: [
        "hover effects",
        "click animations",
        "smooth transitions",
        "micro-interactions",
        "loading animations",
        "success states",
        "error states",
      ],
    },
    {
      id: "stylingFramework",
      label: "Styling Framework",
      type: "select",
      icon: "Brush",
      placeholder: "Select styling approach",
      description: "The CSS framework or approach to use",
      required: true,
      options: ["Tailwind CSS", "CSS Modules", "Styled Components", "Emotion", "Vanilla CSS", "SCSS"],
    },
  ],
  examples: [
    {
      name: "Contact Form",
      description: "A comprehensive contact form with validation",
      values: {
        componentType: "Form",
        projectContext: "business website",
        functionality: "collect user inquiries with name, email, subject, and message fields",
        features: ["form validation", "loading states", "error handling", "success states"],
        designStyle: "Modern/Minimal",
        responsive: ["Mobile-first", "Touch-friendly"],
        accessibility: ["Screen reader support", "Keyboard navigation", "ARIA labels"],
        interactions: ["smooth transitions", "success states", "error states"],
        stylingFramework: "Tailwind CSS",
      },
    },
  ],
}
